distmt
?kmeans()
swirl()
cmat
points(cx,cy,col=c("red","orange","purple",pch=3,cex=2,lwd=2))
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,colmean,which.min)
apply(distTmp,mean,which.min)
apply(distTmp,colMeans,which.min)
apply(distTmp,colMeans(),which.min)
dd
x<3
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
aply(distTmp2,2,which.min)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1, pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,xol=kmObj$cluster,pch=19,cex=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"), pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
set.seed(12345)
par(mar=rep(0.2,4))
dataMatrix<-matrix(rnorm(400),nrow=40)
head(dataMatrix)
?matrix
?image
image(1:10,1:40, t(dataMatrix),[nrow(dataMatrix):1])
image(1:10,1:40, t(dataMatrix)[nrow(dataMatrix):1])
?t
image(1:10,1:40, t(dataMatrix)[,nrow(dataMatrix):1])
heatmap(dataMatrix)
?scale
xx<-rep(c(0,5) each=5)
xx<-rep(c(0,5), each=5)
xx
xx<-rep(c(0,5), 5)
xx
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.r")
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu*%*diag*%*t(matv)
ss<-1
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-(svd1$u[,1] %*% svd1$d[1])*svd1$v
ss<-2
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2<-svd1$u[,1:2]%*%svd1$d[,1:2]%*%t(svd1$v[,1:2])
sss<-2
a2<-svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
play()
svd1$d
diag(svd1$d)
nxt()
myImage(svd1$u[,1:10]%*%diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
?image
swirl()
play()
heat.colors()
heat.colors(1)
heat.colors(100)
topo.colors(10)
nxt()
colors(10)
sample(color(),1)
sample(colors(),10)
pal<-colorRamp(c("red","blue"))
View(pal)
View(pal)
pal(0)
pal(1)
pal(seq(0,1,len=6))
play()
pal2<-colorRamp(c("red","green","blue"))
pal2(0,5)
pal2(0.5)
pal2(seq(0,1,len=6))
nxt()
p1<-colorRampPallete(c("red","blue"))
p1<-colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xcc
p2<-colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
showMe(p2(200))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue","green"), alpha=0.5)
p3(5)
plot(x,y,pch=19,col=rgb(0,0.5,0.5))
plot(x,y,pch=19,col=rgb(0,0.5,0.5,0.3))
cols<-brewer.pal(3,"BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
x<-rnorm(10000)
y<-rnorm(10000,1,3)
smoothScatter(x,y,colramp=colorRampPalette(c("blue","yellow")))
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<-subset(ssd,subject=1)
sub1<-subset(ssd,subject==1)
dim(sub1)
names(sub[1:12])
names(sub[1:12,])
names(sub[,1:12])
aa
aa-1
aa<-1
names(sub[1:12])
names(sub1[1:12])
myedit("showXY.R")
showMe(1:6)
mdist<-dist(sub1[,1"3"])
mdist<-dist(sub1[,1:3])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub$CTIVITY))
myplclust(hclustering,lab.col = unclass(sub$activity))
myplclust(hclustering,lab.col = unclass(sub1$activity))
mdist<-dist(sub1[,10:12])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd1<-svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<-which.max(svd1$v[2])
maxCon<-which.max(svd1$v[,2])
mdist<-dist(c(sub1[,10:12],maxCon))
aa<-2
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering<-hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
names(sub1p[maxCon])
names(sub1[maxCon])
kClust<-kmeans(sub1[,-c(562,563)],centers=6)
table(kClust$cluster,sub1$activity)
kClust<-kmeans(sub1[,-c(562,563)],centers=6,nsart=100)
kClust<-kmeans(sub1[,-c(562,563)],centers=6,nstart=100)
table(kClust$cluster,sub1$activity)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<-which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walk Cluster")
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
?less
??less
?readRDS
x<-list(1:5)
x
x[1]
x[[1]]
?unique
swirl()
dima(pm0)
dim(pm0)
head(pm0)
cnames
cnames<-strsplit(cnames,"|",fixed=TRUE)
cnames
names(pm0)<-make.names(cnames[[1]][wcol])
head(pm0)
x0<-pmo$Sample.Value
x0<-pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
mean(is.na(x1))
sumary(x0)
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
negative<-x1<0
head(negative)
sum(negative,na.rm=TRUE)
mean(negative,na.rm=TRUE)
dates<-pm1$Date
str(dates)
dates<-as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative], month)
hist(dates[negative], "month"")
l;l
)
hist(dates[negative], "month")
str(site0)
both<-intersect(site0,site1)
?intersect
both
head(pm0)
cnt0<-subset(pm0)
cnt0<-subset(pm0,State.Code==36&county.site %in% both)
cnt1<-subset(pm1,State.Code==36&county.site %in% both)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub<-subset(cnt0,County.Code==63 & Site.ID==2008)
pm1sub<-subset(cnt1,County.Code==63 & Site.ID==2008)
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(median(x0sub,na.rm = TRUE),lwd=2)
abline(median(x0sub,na.rm = TRUE),lwd=2)
ee
ee<-2
abline(h= median(x0sub,na.rm = TRUE),lwd=2)
plot(dates1,x1sub,pch=20)
abline(h= median(x1sub,na.rm = TRUE),lwd=2)
rng<-range(x0sub,x1sub,na.m=TRUE)
rng<-range(x0sub,x1sub,na.rm=TRUE)
rng
mn0<-with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1<-with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(state=names(mno),mean=mn0)
d0<-data.frame(state=names(mn0),mean=mn0)
d1<-data.frame(state=names(mn1),mean=mn1)
mrg<-merge(d0,d1,by="state")
head(mn0)
head(d0)
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2],xlim=c9.5,2.5))
with(mrg,plot(rep(1,52),mrg[,2],xlim=c(.5,2.5))
""
with(mrg,plot(rep(1,52),mrg[,2],xlim=c(.5,2.5)))
with(mrg,points(rep(2,52),mrg[,3]))
?segments
segments()
a<-2
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x < mrg$mean.y]
mrg[mrg$mean.x < mrg$mean.y,]
?sample
?grepl
install.packages(kernlab)
install.packages(kernlab)
library(kernlab)
setwd("./RR/Week1_CP/RepData_PeerAssessment1")
rm(list=ls())
curr_locale <- Sys.getlocale("LC_TIME")
## To set it in english
Sys.setlocale("LC_TIME","en_US.UTF-8")
## To come back to local setting later
## Sys.setlocale("LC_TIME",curr_locale)
##Maybe should delete
intName <- function(interval) {
if (interval < 10) {
t_interval = paste("00:0",interval, sep="")
} else if (interval >= 10 && interval < 100) {
t_interval = paste("00:", interval, sep="")
} else if (interval >= 100 && interval < 1000) {
t_interval = paste("0", substr(interval,1,1),":", substr(interval,2,3), sep="")
} else {
t_interval = paste(substr(interval,1,2),":", substr(interval,3,4), sep="")
}
}
##Setting working directory
setwd("./RR/Week1_CP/RepData_PeerAssessment1")
##Unzipping file fromm the forked repository
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activity_data <- read.csv("activity.csv")
##Formatting dates as Date
activity_data$date <- as.Date(activity_data$date,"%Y-%m-%d")
##Q: What is mean total number of steps taken per day?
Total_steps_day <- tapply(activity_data$steps, activity_data$date,sum)
##Plotting the histogram (number of breaks was find by plotting several plots)
hist(Total_steps_day, breaks=10, col="violetred2",xlab="Number of steps",
ylab="Frequency", main="Histogram of Number of Total Steps taken per day")
Mean_tsd <- mean(Total_steps_day)
Median_tsd <- median(Total_steps_day)
##NA, cause we didnt omit that. Will do in next steps.
Mean_tsd2 <- mean(Total_steps_day, na.rm = TRUE)
Median_tsd2 <- median(Total_steps_day,na.rm = TRUE)
print(Mean_tsd2)
print(Median_tsd2)
##Q: What is the average daily activity pattern?
mean_steps <- tapply(activity_data$steps,activity_data$interval,
mean,na.rm=TRUE)
plot(names(mean_steps), mean_steps , type="l", xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
for (i in 1:length(names(mean_steps)){
yax[i]<-intName(names(mean_steps)[i])
}
##5-minutes interval with maximum steps taken
max_steps_interval <- which.max(mean_steps)
msi <- names(max_steps_interval)
print(msi)
##Q: Imputing missing values
##missing values
mis_val <- sum(is.na(activity_data$steps))
print(mis_val)
## As the strategy for filling NA's we took this: fill missing values with mean
## of 5-minutes intervals through all days
Activity_data_filled <- activity_data
for (i in 1:nrow(Activity_data_filled)){
if (is.na(Activity_data_filled$steps[i]) == TRUE){
Activity_data_filled$steps[i] <- mean_steps[which(
as.numeric(names(mean_steps)) == Activity_data_filled$interval[i])]
}
}
Total_steps_day_filled <- tapply(Activity_data_filled$steps, Activity_data_filled$date,sum)
##Plotting the histogram (number of breaks was find by plotting several plots)
hist(Total_steps_day_filled, breaks=10, col="peachpuff",xlab="Number of steps",
ylab="Frequency", main="Histogram of Number of Total Steps taken per day, NA filled")
Mean_tsd_filled<- mean(Total_steps_day_filled)
Median_tsd_filled <- median(Total_steps_day_filled)
print(Mean_tsd_filled)
print(Median_tsd_filled)
##Mean is the same (surprise!), cause we used meanvalue of the intervals to substitute NA's
## and Median became a bit higher and equal to Mean
##Q: Are there differences in activity patterns between weekdays and weekends?
##Adding column with type of the day
Activity_data_filled$day_type <- weekdays(as.Date(Activity_data_filled$date))
Activity_data_filled$day_type <- ifelse(Activity_data_filled$day_type %in% c("Saturday", "Sunday"),"weekend", "weekday")
##Aggegating by type of the day and time intervals
mean_tsd_final <- aggregate(Activity_data_filled$steps,
by=list(Activity_data_filled$interval,
Activity_data_filled$day_type),mean)
names(mean_tsd_final) <- c("interval","day_type","steps")
##Plotting results
library(lattice)
xyplot(steps ~ interval | day_type, data = mean_tsd_final, layout = c(1, 2), type="l", xlab = "Interval", ylab = "Number of steps")
for (i in 1:length(names(mean_steps))){
yax[i]<-intName(names(mean_steps)[i])
}
yax<-names(mean_steps)
for (i in 1:length(names(mean_steps))){
yax[i]<-intName(names(mean_steps)[i])
}
head(yax)
intName(5)
print(intName(5))
names(mean_steps)[0]
names(mean_steps)[1]
names(mean_steps)[2]
yax[2]
intName(names(mean_steps)[2])
print(intName(names(mean_steps)[2]))
intName <- function(interval) {
if (as.numeric(interval) < 10) {
t_interval = paste("00:0",interval, sep="")
} else if (as.numeric(interval) >= 10 && interval < 100) {
t_interval = paste("00:", interval, sep="")
} else if (as.numeric(interval) >= 100 && interval < 1000) {
t_interval = paste("0", substr(interval,1,1),":", substr(interval,2,3), sep="")
} else {
t_interval = paste(substr(interval,1,2),":", substr(interval,3,4), sep="")
}
}
print(intName(as.numeric(names(mean_steps)[2])))
yax<-names(mean_steps)
for (i in 1:length(names(mean_steps))){
yax[i]<-intName(names(mean_steps)[i])
}
head(yax)
intName <- function(interval) {
if (as.numeric(interval) < 10) {
t_interval = paste("00:0",interval, sep="")
} else if (as.numeric(interval) >= 10 && as.numeric(interval) < 100) {
t_interval = paste("00:", interval, sep="")
} else if (as.numeric(interval) >= 100 && as.numeric(interval) < 1000) {
t_interval = paste("0", substr(interval,1,1),":", substr(interval,2,3), sep="")
} else {
t_interval = paste(substr(interval,1,2),":", substr(interval,3,4), sep="")
}
}
yax<-names(mean_steps)
for (i in 1:length(names(mean_steps))){
yax[i]<-intName(names(mean_steps)[i])
}
head(yax)
yax
plot(names(mean_steps), mean_steps , type="l", xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
plot(yax, mean_steps , type="l", xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
str(yax)
yax<-as.factor(yax)
plot(yax, mean_steps , type="l", xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
plot(names(mean_steps), mean_steps , type="l", xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
plot(yax, mean_steps , type="l", xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
library(ggplot2)
mean_steps2<-mean_steps
mean_steps2$yax<-yax
head(mean_steps2)
head(mean_steps)
mean_steps2<-unlist(mean_steps2)
head(mean_steps2)
names(mean_steps2)<-yax
head(mean_steps2)
plot(names(mean_steps), mean_steps , type="l", xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
plot(yax, mean_steps , type="l", xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
str(mean_steps2)
summary(mean_steps2)
ggplot(data=mean_steps2, aes(x=yax, y=mean_steps2)) +
geom_line()
class(mean_steps)
class(mean_steps2)
mean_steps2<-mean_steps
names(mean_steps2)<-yax
class(mean_steps2)
ggplot(data=mean_steps2, aes(x=yax, y=mean_steps2)) +
geom_line()
yax<-as.factor(yax)
plot(yax, mean_steps ,  xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
yax<-names(mean_steps)
for (i in 1:length(names(mean_steps))){
yax[i]<-intName(names(mean_steps)[i])
}
yax<-as.factor(yax)
plot(yax, mean_steps, xlab="5 minutes intervals",
ylab="Mean number of steps (during all Days)",
main="Average Steps Taken at 5 minute Intervals",
col="blue")
str(Activity_data_filled)
Activity_data_filled$day_type <-as.factor(Activity_data_filled$day_type)
str(Activity_data_filled)
mean_tsd_final <- aggregate(Activity_data_filled$steps,
by=list(Activity_data_filled$interval,
Activity_data_filled$day_type),mean)
names(mean_tsd_final) <- c("interval","day_type","steps")
library(lattice)
xyplot(steps ~ interval | day_type, data = mean_tsd_final, layout = c(1, 2), type="l", xlab = "Interval", ylab = "Number of steps")
##Plotting results
library(lattice)
xyplot(steps ~ interval | day_type, data = mean_tsd_final, layout = c(1, 2), type="l", xlab = "Interval", ylab = "Number of steps")
library(lattice)
xyplot(steps ~ interval | day_type, data = mean_tsd_final, layout = c(1, 2), type="l", xlab = "Interval", ylab = "Number of steps")
hist(Total_steps_day_filled, breaks=10, col="peachpuff",xlab="Number of steps",
ylab="Frequency", main="Histogram of Number of Total Steps taken per day, NA filled")
library(lattice)
xyplot(steps ~ interval | day_type, data = mean_tsd_final, layout = c(1, 2), type="l", xlab = "Interval", ylab = "Number of steps")
xyplot(steps ~ interval | day_type, data = mean_tsd_final, layout = c(1, 2), type="l", xlab = "Interval", ylab = "Number of steps")
